---
import '~/assets/styles/hero.scss';
import { Icon } from 'astro-icon';

interface CallToAction {
  text: string;
  href: string;
  icon?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  callToAction?: string | CallToAction;
  callToAction2?: string | CallToAction;
  image?: string | any; // TODO: find HTMLElementProps
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  content = await Astro.slots.render('content'),
  callToAction = await Astro.slots.render('callToAction'),
  callToAction2 = await Astro.slots.render('callToAction2'),
} = Astro.props;
---

<section class="relative md:-mt-[76px]">
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div class="hero hero-home relative max-w-8xl mx-auto">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class="hero--content-container">
      <div class="hero--content md:flex md:flex-nowrap max-w-screen-xl mx-auto">
        {
          title && (
            <h1
              class="hero--title text-4xl md:text-[2.5rem] lg:text-[3.5rem] lg:leading-none xl:text-[4.25rem] font-semibold mb-4 font-heading"
              set:html={title}
            />
          )
        }
        <div class="hero--text max-w-3xl mx-auto">
          {subtitle && <p class="font-serif mb-6 lg:text-2xl lg:leading-9 lg:pb-6 max-w-lg" set:html={subtitle} />}
          <div class="max-w-xs ml-0 sm:max-w-md m-auto gap-4">
            {
              callToAction && (
                <div class="flex w-full sm:w-auto">
                  {typeof callToAction === 'string' ? (
                    <Fragment set:html={callToAction} />
                  ) : (
                    <a class="btn btn-primary sm:mb-0 font-bold" href={callToAction?.href}>
                      {callToAction?.text}
                      {callToAction?.icon && (
                        <>
                          <Icon name={callToAction.icon} class="w-5 h-5 ml-4 -mr-2" />{' '}
                        </>
                      )}
                    </a>
                  )}
                </div>
              )
            }
            {
              callToAction2 && (
                <div class="flex w-full sm:w-auto">
                  {typeof callToAction2 === 'string' ? (
                    <Fragment set:html={callToAction2} />
                  ) : (
                    <a class="btn w-full" href={callToAction2?.href}>
                      {callToAction2?.icon && (
                        <>
                          <Icon name={callToAction2.icon} class="w-5 h-5 mr-1 -ml-1.5" />{' '}
                        </>
                      )}
                      {callToAction2.text}
                    </a>
                  )}
                </div>
              )
            }
          </div>
        </div>
        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
